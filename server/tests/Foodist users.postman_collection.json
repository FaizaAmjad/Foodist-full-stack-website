{
	"info": {
		"_postman_id": "b5543ab4-d2a2-47bb-b4cc-436165f516c9",
		"name": "Foodist users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29738720"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', () => {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userName\": \"Testbonk\",\n    \"password\": \"123\"\n\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try to create user with same name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 409', () => {",
							"    pm.response.to.have.status(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userName\": \"Testbonk\",\n    \"password\": \"123\"\n\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users usernames",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response JSON contains 'username'\", () => {",
							"    pm.expect(pm.response.json()).to.have.property(\"usernames\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/v1/users/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get same user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response 'userName' equals Testbonk\", () => {",
							"    pm.expect(pm.response.json().userName).to.equal('Testbonk');",
							"});",
							"",
							"pm.test(\"Response 'password' equals 123\", () => {",
							"    pm.expect(pm.response.json().password).to.equal('123');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/v1/users/Testbonk",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"Testbonk"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try to get user that doesnt exitst",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 404', () => {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Response 'message' equals User not found\", () => {",
							"    pm.expect(pm.response.json().message).to.equal('User not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/v1/users/fsdhgiuwphuifguurwehguhpwfjgklwjnrkjwg134a@fghfg",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"fsdhgiuwphuifguurwehguhpwfjgklwjnrkjwg134a@fghfg"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change password for that user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response 'message' equals 'Password updated'\", () => {",
							"    pm.expect(pm.response.json().message).to.equal('Password update');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"newPassword\": \"321\"\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users/Testbonk",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"Testbonk"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try to change password for non existing user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 404', () => {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Response 'message' equals 'User not found'\", () => {",
							"    pm.expect(pm.response.json().message).to.equal('User not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"newPassword\": \"321\"\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users/gfsdhihiehehuhtjkgh3893481212@uihufihdij",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"gfsdhihiehehuhtjkgh3893481212@uihufihdij"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try to delete non existing user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 404', () => {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Response 'message' equals 'User not found'\", () => {",
							"    pm.expect(pm.response.json().message).to.equal('User not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"123\"\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users/gsdfhjoihsdhgif348t438t92348hufhihuhfuwef@jgdfijg",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"gsdfhjoihsdhgif348t438t92348hufhihuhfuwef@jgdfijg"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete same user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response 'message' equals 'User deleted'\", () => {",
							"    pm.expect(pm.response.json().message).to.equal('User deleted');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"123\"\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users/Testbonk",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"Testbonk"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user to test method overriding",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response 'message' equals User created\", () => {",
							"    pm.expect(pm.response.json().message).to.equal('User created');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userName\": \"Testbonk\",\n    \"password\": \"123\"\n\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try to delete non existing user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 404', () => {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Response 'message' equals 'User not found'\", () => {",
							"    pm.expect(pm.response.json().message).to.equal('User not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/v1/users/fsdjgouihjsdfjguifghfiushgidfguhsgui3452432452345?_method=DELETE",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"fsdjgouihjsdfjguifghfiushgidfguhsgui3452432452345"
					],
					"query": [
						{
							"key": "_method",
							"value": "DELETE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Try do delete user without method query",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 400', () => {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Response 'message' equals 'Bad request'\", () => {",
							"    pm.expect(pm.response.json().message).to.equal('Bad request');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/v1/users/Testbonk",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"Testbonk"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test method overriding by deleting with post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response 'message' equals 'User deleted'\", () => {",
							"    pm.expect(pm.response.json().message).to.equal('User deleted');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/v1/users/Testbonk?_method=DELETE",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"Testbonk"
					],
					"query": [
						{
							"key": "_method",
							"value": "DELETE"
						}
					]
				}
			},
			"response": []
		}
	]
}